{"ast":null,"code":"var _jsxFileName = \"/home/macsuel/Documentos/MeusProjetos/Aplicacao/letmeask/src/contexts/AuthContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext({});\nexport function AuthContextProvider(props) {\n  _s();\n\n  const [user, setUser] = useState();\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(user => {\n      if (user) {\n        const {\n          displayName,\n          photoURL,\n          uid\n        } = user;\n\n        if (!displayName || !photoURL) {\n          throw new Error('Missing information from Google Account.');\n        }\n\n        setUser({\n          id: uid,\n          name: displayName,\n          avatar: photoURL\n        });\n      }\n    });\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  async function signInWithGoogle() {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    const result = await auth.signInWithPopup(provider);\n\n    if (result.user) {\n      const {\n        displayName,\n        photoURL,\n        uid\n      } = result.user;\n\n      if (!displayName || !photoURL) {\n        throw new Error('Missing information from Google Account');\n      }\n\n      setUser({\n        id: uid,\n        name: displayName,\n        avatar: photoURL\n      });\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      signInWithGoogle\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AuthContextProvider, \"hT6C72rcbfRUedrDq+TPaFfRI/M=\");\n\n_c = AuthContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["/home/macsuel/Documentos/MeusProjetos/Aplicacao/letmeask/src/contexts/AuthContext.tsx"],"names":["createContext","useEffect","useState","AuthContext","AuthContextProvider","props","user","setUser","unsubscribe","auth","onAuthStateChanged","displayName","photoURL","uid","Error","id","name","avatar","signInWithGoogle","provider","firebase","GoogleAuthProvider","result","signInWithPopup","children"],"mappings":";;;AAAA,SAASA,aAAT,EAAmCC,SAAnC,EAA8CC,QAA9C,QAA8D,OAA9D;;AAaA,OAAO,MAAMC,WAAW,gBAAGH,aAAa,CAAC,EAAD,CAAjC;AAMP,OAAO,SAASI,mBAAT,CAA6BC,KAA7B,EAAoC;AAAA;;AACvC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,EAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMO,WAAW,GAAGC,IAAI,CAACC,kBAAL,CAAwBJ,IAAI,IAAI;AAClD,UAAIA,IAAJ,EAAU;AACR,cAAM;AAAEK,UAAAA,WAAF;AAAeC,UAAAA,QAAf;AAAyBC,UAAAA;AAAzB,YAAiCP,IAAvC;;AAEA,YAAI,CAACK,WAAD,IAAgB,CAACC,QAArB,EAA+B;AAC7B,gBAAM,IAAIE,KAAJ,CAAU,0CAAV,CAAN;AACD;;AAEDP,QAAAA,OAAO,CAAC;AACNQ,UAAAA,EAAE,EAAEF,GADE;AAENG,UAAAA,IAAI,EAAEL,WAFA;AAGNM,UAAAA,MAAM,EAAEL;AAHF,SAAD,CAAP;AAKD;AACF,KAdmB,CAApB;AAgBA,WAAO,MAAM;AACXJ,MAAAA,WAAW;AACZ,KAFD;AAGD,GApBQ,EAoBN,EApBM,CAAT;;AAsBA,iBAAeU,gBAAf,GAAkC;AAChC,UAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAACX,IAAT,CAAcY,kBAAlB,EAAjB;AAEA,UAAMC,MAAM,GAAG,MAAMb,IAAI,CAACc,eAAL,CAAqBJ,QAArB,CAArB;;AACA,QAAIG,MAAM,CAAChB,IAAX,EAAiB;AACf,YAAM;AAAEK,QAAAA,WAAF;AAAeC,QAAAA,QAAf;AAAyBC,QAAAA;AAAzB,UAAiCS,MAAM,CAAChB,IAA9C;;AAEA,UAAI,CAACK,WAAD,IAAgB,CAACC,QAArB,EAA+B;AAC7B,cAAM,IAAIE,KAAJ,CAAU,yCAAV,CAAN;AACD;;AAEDP,MAAAA,OAAO,CAAC;AACNQ,QAAAA,EAAE,EAAEF,GADE;AAENG,QAAAA,IAAI,EAAEL,WAFA;AAGNM,QAAAA,MAAM,EAAEL;AAHF,OAAD,CAAP;AAKD;AACF;;AACD,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEN,MAAAA,IAAF;AAAQY,MAAAA;AAAR,KAA7B;AAAA,cACKb,KAAK,CAACmB;AADX;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;GAhDepB,mB;;KAAAA,mB","sourcesContent":["import { createContext, ReactNode, useEffect, useState } from \"react\";\n\ntype User = {\n    id: string;\n    name: string;\n    avatar: string;\n}\n\ntype AuthContextType = {\n    user: User | undefined;\n    signInWithGoogle: () => Promise<void>;\n}\n\nexport const AuthContext = createContext({} as AuthContextType);\n\ntype AuthContextProvider = {\n    children: ReactNode;\n}\n\nexport function AuthContextProvider(props) {\n    const [user, setUser] = useState<User>();\n\n    useEffect(() => {\n      const unsubscribe = auth.onAuthStateChanged(user => {\n        if (user) {\n          const { displayName, photoURL, uid } = user\n  \n          if (!displayName || !photoURL) {\n            throw new Error('Missing information from Google Account.')\n          }\n  \n          setUser({\n            id: uid,\n            name: displayName,\n            avatar: photoURL\n          })\n        }\n      })\n  \n      return () => {\n        unsubscribe();\n      }\n    }, [])\n  \n    async function signInWithGoogle() {\n      const provider = new firebase.auth.GoogleAuthProvider();\n  \n      const result = await auth.signInWithPopup(provider)\n      if (result.user) {\n        const { displayName, photoURL, uid } = result.user\n  \n        if (!displayName || !photoURL) {\n          throw new Error('Missing information from Google Account')\n        }\n  \n        setUser({\n          id: uid,\n          name: displayName,\n          avatar: photoURL\n        })\n      }\n    }\n    return (\n        <AuthContext.Provider value={{ user, signInWithGoogle }}>\n            {props.children}\n        </AuthContext.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}