{"ast":null,"code":"var _jsxFileName = \"/home/macsuel/Documentos/MeusProjetos/Aplicacao/letmeask/src/pages/AdminRoom.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { useParams } from 'react-router';\nimport logoImg from \"../assets/images/logo.svg\";\nimport { Button } from '../componentes/Button';\nimport { Question } from '../componentes/Question';\nimport { RoomCode } from '../componentes/RoomCode';\nimport { useAuth } from '../Hooks/useAuth';\nimport { useRoom } from '../Hooks/useRoom';\nimport { database } from '../services/firebase';\nimport '../styles/room.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function AdminRoom() {\n  _s();\n\n  const {\n    user\n  } = useAuth();\n  const params = useParams();\n  const [newQuestion, setNewQuestion] = useState('');\n  const roomId = params.id;\n  const {\n    questions,\n    title\n  } = useRoom(roomId);\n\n  async function handleSendQuestion(event) {\n    event.preventDefault();\n\n    if (newQuestion.trim() === '') {\n      return;\n    }\n\n    if (!user) {\n      throw new Error('You must be logged in');\n    }\n\n    const question = {\n      content: newQuestion,\n      author: {\n        name: user.name,\n        avatar: user.avatar\n      },\n      isHighlighted: false,\n      isAnswered: false\n    };\n    await database.ref(`rooms/${roomId}/questions`).push(question);\n    setNewQuestion('');\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"page-room\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: logoImg,\n          alt: \"Letmeask\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(RoomCode, {\n          code: roomId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          children: \" Encerrar Sala\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"room-title\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Sala \", title]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this), questions.length > 0 && questions.length > 1 ? /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [questions.length, \" perguntas\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 69\n        }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [questions.length, \" pergunta\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 113\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-list\",\n        children: questions.map(question => {\n          return /*#__PURE__*/_jsxDEV(Question, {\n            content: question.content,\n            author: question.author\n          }, question.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AdminRoom, \"zFbrhW+w7c/XhrkZcMwtmAYTl6A=\", false, function () {\n  return [useAuth, useParams, useRoom];\n});\n\n_c = AdminRoom;\n\nvar _c;\n\n$RefreshReg$(_c, \"AdminRoom\");","map":{"version":3,"sources":["/home/macsuel/Documentos/MeusProjetos/Aplicacao/letmeask/src/pages/AdminRoom.tsx"],"names":["useState","useParams","Button","Question","RoomCode","useAuth","useRoom","database","AdminRoom","user","params","newQuestion","setNewQuestion","roomId","id","questions","title","handleSendQuestion","event","preventDefault","trim","Error","question","content","author","name","avatar","isHighlighted","isAnswered","ref","push","logoImg","length","map"],"mappings":";;;AAAA,SAAoBA,QAApB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,cAA1B;;AAIA,SAASC,MAAT,QAAuB,uBAAvB;AACA,SAASC,QAAT,QAAyB,yBAAzB;AACA,SAASC,QAAT,QAAyB,yBAAzB;AACA,SAASC,OAAT,QAAwB,kBAAxB;AACA,SAASC,OAAT,QAAwB,kBAAxB;AACA,SAASC,QAAT,QAAyB,sBAAzB;AAEA,OAAO,qBAAP;;AAMA,OAAO,SAASC,SAAT,GAAqB;AAAA;;AACxB,QAAM;AAAEC,IAAAA;AAAF,MAAWJ,OAAO,EAAxB;AACA,QAAMK,MAAM,GAAGT,SAAS,EAAxB;AACA,QAAM,CAACU,WAAD,EAAcC,cAAd,IAAgCZ,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAMa,MAAM,GAAGH,MAAM,CAACI,EAAtB;AACA,QAAM;AAACC,IAAAA,SAAD;AAAYC,IAAAA;AAAZ,MAAqBV,OAAO,CAACO,MAAD,CAAlC;;AAEA,iBAAeI,kBAAf,CAAkCC,KAAlC,EAAoD;AAChDA,IAAAA,KAAK,CAACC,cAAN;;AAEA,QAAIR,WAAW,CAACS,IAAZ,OAAuB,EAA3B,EAA+B;AAC3B;AACH;;AAED,QAAI,CAACX,IAAL,EAAW;AACP,YAAM,IAAIY,KAAJ,CAAU,uBAAV,CAAN;AACH;;AAED,UAAMC,QAAQ,GAAG;AACbC,MAAAA,OAAO,EAAEZ,WADI;AAEba,MAAAA,MAAM,EAAE;AACJC,QAAAA,IAAI,EAAEhB,IAAI,CAACgB,IADP;AAEJC,QAAAA,MAAM,EAAEjB,IAAI,CAACiB;AAFT,OAFK;AAMbC,MAAAA,aAAa,EAAE,KANF;AAObC,MAAAA,UAAU,EAAE;AAPC,KAAjB;AAUA,UAAMrB,QAAQ,CAACsB,GAAT,CAAc,SAAQhB,MAAO,YAA7B,EAA0CiB,IAA1C,CAA+CR,QAA/C,CAAN;AAEAV,IAAAA,cAAc,CAAC,EAAD,CAAd;AACH;;AACD,sBACI;AAAK,IAAA,EAAE,EAAC,WAAR;AAAA,4BACI;AAAA,6BACI;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA,gCACI;AAAK,UAAA,GAAG,EAAEmB,OAAV;AAAmB,UAAA,GAAG,EAAC;AAAvB;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,QAAD;AAAU,UAAA,IAAI,EAAElB;AAAhB;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ,eASI;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,gCACI;AAAA,8BAAUG,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAEKD,SAAS,CAACiB,MAAV,GAAmB,CAAnB,IAAwBjB,SAAS,CAACiB,MAAV,GAAmB,CAA3C,gBAA+C;AAAA,qBAAOjB,SAAS,CAACiB,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,gBAA/C,gBAA2F;AAAA,qBAAOjB,SAAS,CAACiB,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFhG;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAMI;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA,kBACKjB,SAAS,CAACkB,GAAV,CAAcX,QAAQ,IAAI;AACvB,8BACI,QAAC,QAAD;AAEI,YAAA,OAAO,EAAEA,QAAQ,CAACC,OAFtB;AAGI,YAAA,MAAM,EAAED,QAAQ,CAACE;AAHrB,aACSF,QAAQ,CAACR,EADlB;AAAA;AAAA;AAAA;AAAA,kBADJ;AAOH,SARA;AADL;AAAA;AAAA;AAAA;AAAA,cANJ;AAAA;AAAA;AAAA;AAAA;AAAA,YATJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA+BH;;GA/DeN,S;UACKH,O,EACFJ,S,EAGYK,O;;;KALfE,S","sourcesContent":["import { FormEvent, useState } from 'react';\nimport { useParams } from 'react-router';\n\nimport logoImg from '../assets/images/logo.svg'\n\nimport { Button } from '../componentes/Button'\nimport { Question } from '../componentes/Question';\nimport { RoomCode } from '../componentes/RoomCode';\nimport { useAuth } from '../Hooks/useAuth';\nimport { useRoom } from '../Hooks/useRoom';\nimport { database } from '../services/firebase';\n\nimport '../styles/room.scss'\n\ntype RoomParams = {\n    id: string;\n}\n\nexport function AdminRoom() {\n    const { user } = useAuth();\n    const params = useParams<RoomParams>();\n    const [newQuestion, setNewQuestion] = useState('');\n    const roomId = params.id;\n    const {questions, title} = useRoom(roomId)  \n\n    async function handleSendQuestion(event: FormEvent) {\n        event.preventDefault();\n\n        if (newQuestion.trim() === '') {\n            return;\n        }\n\n        if (!user) {\n            throw new Error('You must be logged in');\n        }\n\n        const question = {\n            content: newQuestion,\n            author: {\n                name: user.name,\n                avatar: user.avatar,\n            },\n            isHighlighted: false,\n            isAnswered: false,\n        };\n\n        await database.ref(`rooms/${roomId}/questions`).push(question)\n\n        setNewQuestion('');\n    }\n    return (\n        <div id=\"page-room\">\n            <header>\n                <div className=\"content\">\n                    <img src={logoImg} alt=\"Letmeask\" />\n                    <RoomCode code={roomId} />\n                    <Button> Encerrar Sala</Button>\n                </div>\n            </header>\n\n            <main>\n                <div className=\"room-title\">\n                    <h1>Sala {title}</h1>\n                    {questions.length > 0 && questions.length > 1 ? <span>{questions.length} perguntas</span> : <span>{questions.length} pergunta</span>}\n                </div>\n\n                <div className=\"question-list\">\n                    {questions.map(question => {\n                        return (\n                            <Question\n                                key={question.id}\n                                content={question.content}\n                                author={question.author}\n                            />\n                        );\n                    })}\n                </div>\n\n            </main>\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}